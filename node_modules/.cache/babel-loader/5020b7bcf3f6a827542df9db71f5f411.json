{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp, _initialiseProps;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _FormControl = require('@material-ui/core/FormControl');\n\nvar _FormControl2 = _interopRequireDefault(_FormControl);\n\nvar _FormHelperText = require('@material-ui/core/FormHelperText');\n\nvar _FormHelperText2 = _interopRequireDefault(_FormHelperText);\n\nvar _FormLabel = require('@material-ui/core/FormLabel');\n\nvar _FormLabel2 = _interopRequireDefault(_FormLabel);\n\nvar _InputLabel = require('@material-ui/core/InputLabel');\n\nvar _InputLabel2 = _interopRequireDefault(_InputLabel);\n\nvar _propNames = require('../propNames');\n\nvar _propNames2 = _interopRequireDefault(_propNames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction getErrorAndHelperText(field) {\n  var helperText = void 0;\n  var isError = false;\n\n  if (!_lodash2.default.isEmpty(field) && field.validations.length > 0) {\n    helperText = field.validations[0].message;\n    isError = true;\n  }\n\n  return {\n    helperText: helperText,\n    isError: isError\n  };\n}\n\nvar FormControlClone = (_temp = _class = function (_React$Component) {\n  _inherits(FormControlClone, _React$Component); // eslint-disable-next-line react/sort-comp\n\n\n  function FormControlClone(props) {\n    _classCallCheck(this, FormControlClone);\n\n    var _this = _possibleConstructorReturn(this, (FormControlClone.__proto__ || Object.getPrototypeOf(FormControlClone)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var _props$formControlCom = props.formControlComp.props,\n        error = _props$formControlCom.error,\n        required = _props$formControlCom.required;\n    var name = void 0;\n    var value = void 0;\n    var helperText = void 0;\n    var isError = error;\n\n    _react2.default.Children.forEach(props.formControlComp.props.children, function (child) {\n      if (child.type === _FormHelperText2.default) {\n        helperText = String(child.props.children);\n        _this.helperText = helperText;\n      } else if (child.type !== _FormLabel2.default && child.type !== _InputLabel2.default && child.props.name !== undefined && child.props.value !== undefined) {\n        name = child.props.name; // eslint-disable-line prefer-destructuring\n\n        value = child.props.value; // eslint-disable-line prefer-destructuring\n      }\n    });\n\n    if (props.formControlComp.type !== _FormControl2.default || name === undefined || value === undefined) {\n      throw new Error('invalid FormControl control children');\n    }\n\n    if (props.field.value === undefined) {\n      var validatorsPropName = _propNames2.default.FIELD_VALIDATORS;\n      props.onConstruct(_defineProperty({\n        name: name,\n        value: value,\n        required: required\n      }, validatorsPropName, props.formControlComp.props[validatorsPropName]));\n    } else {\n      value = props.field.value; // eslint-disable-line prefer-destructuring\n\n      if (!_lodash2.default.isEmpty(props.field) && props.field.validations.length > 0) {\n        var fieldError = getErrorAndHelperText(props.field);\n        helperText = fieldError.helperText; // eslint-disable-line prefer-destructuring\n\n        isError = fieldError.isError; // eslint-disable-line prefer-destructuring\n      }\n    }\n\n    _this.name = name;\n    _this.state = {\n      helperText: helperText,\n      isError: isError,\n      value: value\n    };\n    return _this;\n  } // eslint-disable-next-line\n\n\n  _createClass(FormControlClone, [{\n    key: 'UNSAFE_componentWillReceiveProps',\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!_lodash2.default.isEmpty(nextProps.field)) {\n        var _getErrorAndHelperTex = getErrorAndHelperText(nextProps.field),\n            _helperText = _getErrorAndHelperTex.helperText,\n            _isError = _getErrorAndHelperTex.isError;\n\n        this.setState({\n          helperText: _helperText,\n          isError: _isError,\n          value: nextProps.field.value\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          formControlComp = _props.formControlComp,\n          props = _props.formControlComp.props;\n      var hasHelperText = false;\n\n      var children = _react2.default.Children.map(props.children, function (child) {\n        // label\n        if (child.type === _FormLabel2.default || child.type === _InputLabel2.default) {\n          return child;\n        } // helper text\n\n\n        if (child.type === _FormHelperText2.default) {\n          hasHelperText = true;\n          return _react2.default.cloneElement(child, {\n            children: _this2.state.helperText\n          });\n        } // field\n\n\n        return _react2.default.cloneElement(child, {\n          onChange: child.props.onChange || _this2.onChange,\n          value: _this2.state.value\n        });\n      }); // support for dynamic helper text\n\n\n      if (!hasHelperText && this.state.helperText !== undefined) {\n        children.push(_react2.default.createElement(_FormHelperText2.default, {\n          key: 1\n        }, this.state.helperText));\n      }\n\n      return _react2.default.cloneElement(formControlComp, {\n        error: this.state.isError,\n        children: children\n      });\n    }\n  }]);\n\n  return FormControlClone;\n}(_react2.default.Component), _class.defaultProps = {\n  field: {}\n}, _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.onChange = function (event) {\n    var value = event.target.value;\n\n    _this3.setState({\n      isError: false,\n      helperText: _this3.helperText,\n      value: value\n    });\n\n    _this3.props.onValueChange(_this3.name, value, true);\n  };\n}, _temp);\nexports.default = FormControlClone;","map":null,"metadata":{},"sourceType":"script"}