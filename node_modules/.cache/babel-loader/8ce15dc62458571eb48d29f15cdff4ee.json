{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validators = exports.messageMap = exports.constants = exports.validate = exports.createValidation = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _messageMap = require('./messageMap');\n\nvar _messageMap2 = _interopRequireDefault(_messageMap);\n\nvar _validators = require('./validators');\n\nvar _validators2 = _interopRequireDefault(_validators);\n\nvar _constants = require('./constants');\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction sprintf(str, args) {\n  var predicate = void 0;\n\n  if (_lodash2.default.isString(args)) {\n    predicate = args;\n  } else if (_lodash2.default.isObject(args) && !_lodash2.default.isArray(args)) {\n    args = Object.values(args);\n\n    predicate = function predicate(match, number) {\n      return args[number] !== undefined ? args[number] : match;\n    };\n  } else {\n    predicate = function predicate(match, number) {\n      return (// eslint-disable-next-line no-nested-ternary\n        args[number] !== undefined ? _lodash2.default.isArray(args) ? args.join(', ') : args[number] : match\n      );\n    };\n  }\n\n  return str.replace(/{(\\d+)}/g, predicate);\n}\n\nvar validationMessageMap = _lodash2.default.clone(_messageMap2.default);\n\nvar createValidation = exports.createValidation = function createValidation(validatorName, args, config) {\n  if (!_lodash2.default.isEmpty(config.messageMap)) {\n    validationMessageMap = config.messageMap;\n  }\n\n  var code = validatorName; // first check if prefix code exists\n\n  if (!validatorName.startsWith(config.messageMapKeyPrefix)) {\n    var prefixedCode = '' + config.messageMapKeyPrefix + validatorName;\n\n    if (_lodash2.default.has(validationMessageMap, prefixedCode)) {\n      code = prefixedCode;\n    }\n  }\n\n  var message = validationMessageMap[code];\n\n  if (message !== undefined && (_lodash2.default.isNumber(args) || !_lodash2.default.isEmpty(args))) {\n    message = sprintf(message, args);\n  }\n\n  return {\n    code: code,\n    message: message\n  };\n};\n\nvar validate = exports.validate = function validate(value, fieldValidators, config) {\n  var validations = [];\n\n  if (!_lodash2.default.isArray(fieldValidators) || _lodash2.default.isEmpty(fieldValidators)) {\n    return [];\n  }\n\n  fieldValidators.forEach(function (validator) {\n    var args = void 0;\n    var validatorName = validator;\n\n    if (_lodash2.default.isObject(validator) && _lodash2.default.size(validator) === 1) {\n      args = Object.values(validator)[0]; // eslint-disable-line prefer-destructuring\n\n      validatorName = Object.keys(validator)[0]; // eslint-disable-line prefer-destructuring\n    } else if (!_lodash2.default.isString(validator)) {\n      console.error('invalid validator:', validator); // eslint-disable-line\n    }\n\n    if (config.validators[validatorName] === undefined) {\n      console.error('undefined validator:', validatorName); // eslint-disable-line\n    } else {\n      value = String(value);\n      var validation = config.validators[validatorName](value, args);\n\n      if (!validation) {\n        validations.push(createValidation(validatorName, args, config));\n      }\n    }\n  });\n  return validations;\n};\n\nexports.constants = _constants2.default;\nexports.messageMap = _messageMap2.default;\nexports.validators = _validators2.default;","map":null,"metadata":{},"sourceType":"script"}