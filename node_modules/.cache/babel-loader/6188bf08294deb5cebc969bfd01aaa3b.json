{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _FormControl = require('@material-ui/core/FormControl');\n\nvar _FormControl2 = _interopRequireDefault(_FormControl);\n\nvar _FormControlLabel = require('@material-ui/core/FormControlLabel');\n\nvar _FormControlLabel2 = _interopRequireDefault(_FormControlLabel);\n\nvar _FormHelperText = require('@material-ui/core/FormHelperText');\n\nvar _FormHelperText2 = _interopRequireDefault(_FormHelperText);\n\nvar _FormLabel = require('@material-ui/core/FormLabel');\n\nvar _FormLabel2 = _interopRequireDefault(_FormLabel);\n\nvar _InputLabel = require('@material-ui/core/InputLabel');\n\nvar _InputLabel2 = _interopRequireDefault(_InputLabel);\n\nvar _Checkbox = require('@material-ui/core/Checkbox');\n\nvar _Checkbox2 = _interopRequireDefault(_Checkbox);\n\nvar _Switch = require('@material-ui/core/Switch');\n\nvar _Switch2 = _interopRequireDefault(_Switch);\n\nvar _FormControlClone = require('./FormControlClone');\n\nvar _FormControlClone2 = _interopRequireDefault(_FormControlClone);\n\nvar _FormControlLabelClone = require('./FormControlLabelClone');\n\nvar _FormControlLabelClone2 = _interopRequireDefault(_FormControlLabelClone);\n\nvar _FieldClone = require('./FieldClone');\n\nvar _FieldClone2 = _interopRequireDefault(_FieldClone);\n\nvar _CheckableFieldClone = require('./CheckableFieldClone');\n\nvar _CheckableFieldClone2 = _interopRequireDefault(_CheckableFieldClone);\n\nvar _DeleteFieldRowButton = require('./DeleteFieldRowButton');\n\nvar _DeleteFieldRowButton2 = _interopRequireDefault(_DeleteFieldRowButton);\n\nvar _propNames = require('../propNames');\n\nvar _propNames2 = _interopRequireDefault(_propNames);\n\nvar _validation2 = require('../validation');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction verifyFieldElement(component) {\n  var whitelist = [_FormControlLabel2.default];\n  return whitelist.includes(component.type) || _lodash2.default.has(component, 'props.name') && _lodash2.default.has(component, 'props.value');\n}\n\nfunction extractFieldValidators(fieldProps) {\n  var validators = _lodash2.default.get(fieldProps, _propNames2.default.FIELD_VALIDATORS);\n\n  if (validators !== undefined) {\n    if (_lodash2.default.isString(validators)) {\n      validators = validators.replace(/\\s/g, '').split(',');\n    } else if (!_lodash2.default.isArray(validators)) {\n      validators = [validators];\n    }\n\n    return validators;\n  }\n\n  return [];\n}\n\nfunction getFieldValues(fields) {\n  var values = {};\n\n  _lodash2.default.each(fields, function (field, name) {\n    if (_lodash2.default.get(field, 'checked') !== false) {\n      values[name] = field.value;\n    }\n  });\n\n  return values;\n}\n\nfunction getPristineFieldValues(fields) {\n  var values = {};\n\n  _lodash2.default.each(fields, function (field, name) {\n    if (!field.isPristine && _lodash2.default.get(field, 'checked') !== false) {\n      values[name] = field.pristineValue;\n    }\n  });\n\n  return values;\n}\n\nfunction getFieldTemplate() {\n  return {\n    isDirty: false,\n    isPristine: true,\n    isRequired: null,\n    pristineValue: null,\n    step: undefined,\n    validations: [],\n    validators: [],\n    value: undefined\n  };\n}\n\nfunction deriveErrorSteps(fields) {\n  var errorSteps = [];\n\n  _lodash2.default.each(fields, function (field) {\n    if (field.validations.length > 0 && !errorSteps.includes(field.step)) {\n      errorSteps.push(field.step);\n    }\n  });\n\n  return errorSteps;\n}\n\nfunction isValidForm(fields) {\n  return _lodash2.default.size(_lodash2.default.filter(fields, function (field) {\n    return field.validations.length > 0;\n  })) === 0;\n}\n\nvar Form = (_temp = _class = function (_React$Component) {\n  _inherits(Form, _React$Component);\n\n  function Form(props) {\n    _classCallCheck(this, Form);\n\n    var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));\n\n    _this.validation = {\n      messageMap: _validation2.messageMap,\n      messageMapKeyPrefix: '',\n      requiredValidatorName: _validation2.constants.REQUIRED_VALIDATOR_NAME,\n      validators: _validation2.validators,\n      validate: _validation2.validate,\n      validateInputOnBlur: false\n    };\n\n    _this.onFieldConstruct = function (fieldProps) {\n      var checked = fieldProps.checked,\n          name = fieldProps.name,\n          required = fieldProps.required,\n          value = fieldProps.value; // checkable input\n\n      if (checked === true) {\n        _lodash2.default.defer(function () {\n          _this.setState({\n            fields: _extends({}, _this.state.fields, _defineProperty({}, name, _extends({}, getFieldTemplate(), {\n              checked: checked || false,\n              step: _this.props.activeStep,\n              value: value\n            })))\n          });\n        }); // other inputs\n\n      } else if (!_lodash2.default.isBoolean(checked)) {\n        var _requiredValidatorName = _this.validation.requiredValidatorName;\n\n        if (!_lodash2.default.has(_this.state.fields, name)) {\n          var _validators = extractFieldValidators(fieldProps);\n\n          if (required && !_lodash2.default.isEmpty(_requiredValidatorName)) {\n            _validators.unshift(_requiredValidatorName);\n          }\n\n          var isRequired = required || _validators.includes(_requiredValidatorName); // set any validations on first construct\n\n\n          var _validations = [];\n\n          if (!_lodash2.default.has(_this.state.fields, name) && _lodash2.default.has(_this.props.validations, name)) {\n            _validations = _this.props.validations[name];\n          }\n\n          _lodash2.default.defer(function () {\n            _this.setState({\n              fields: _extends({}, _this.state.fields, _defineProperty({}, name, _extends({}, getFieldTemplate(), {\n                isRequired: isRequired,\n                pristineValue: value,\n                step: _this.props.activeStep,\n                validators: _validators,\n                validations: _validations,\n                value: value\n              })))\n            });\n\n            if (!_lodash2.default.isEmpty(value)) {\n              _this.validateField(name, value);\n            }\n          });\n        }\n      }\n    };\n\n    _this.onFieldValueChange = function (name, value) {\n      var isDirty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      _lodash2.default.defer(function () {\n        _this.setState({\n          fields: _extends({}, _this.state.fields, _defineProperty({}, name, _extends({}, _this.state.fields[name], {\n            isDirty: isDirty || _this.state.fields[name].isDirty,\n            isPristine: false,\n            validations: [],\n            value: value\n          })))\n        });\n\n        if (isValidForm(_this.state.fields)) {\n          _this.enableSubmitButton();\n        }\n\n        if (_this.onValuesChange !== undefined) {\n          _this.onValuesChange(getFieldValues(_this.state.fields), getPristineFieldValues(_this.state.fields));\n        }\n\n        if (_this.state.fields[name].isDirty) {\n          _this.validateField(name, value);\n        }\n      });\n    };\n\n    _this.onFieldToggle = function (name, value, checked) {\n      _this.setState({\n        fields: _extends({}, _this.state.fields, _defineProperty({}, name, _extends({}, _this.state.fields[name], {\n          checked: checked,\n          isPristine: false,\n          validations: [],\n          value: value\n        })))\n      });\n    };\n\n    _this.validateField = function (name, value) {\n      var field = _this.state.fields[name];\n\n      if (!(field.value === '' && !field.isRequired) && !_lodash2.default.isEmpty(field.validators)) {\n        var _validation = _this.validation;\n\n        var _validations2 = _validation.validate(value, field.validators, _validation); // update state\n\n\n        field.validations = _validations2;\n\n        _this.setState({\n          fields: _extends({}, _this.state.fields, _defineProperty({}, name, field))\n        }); // disable submit button\n\n\n        if (!_lodash2.default.isEmpty(_validations2)) {\n          _this.disableSubmitButton();\n        } // propogate validation\n\n\n        if (_this.props.onFieldValidation !== undefined) {\n          var errorSteps = void 0;\n\n          if (field.step !== undefined) {\n            errorSteps = deriveErrorSteps(_this.state.fields);\n          }\n\n          _this.props.onFieldValidation(field, errorSteps);\n        }\n      }\n    };\n\n    _this.reset = function () {\n      var fields = _this.state.fields;\n\n      _lodash2.default.defer(function () {\n        _lodash2.default.each(fields, function (field, name) {\n          _this.setState({\n            fields: _extends({}, _this.state.fields, _defineProperty({}, name, _extends({}, _this.state.fields[name], {\n              isDirty: false,\n              isPristine: true,\n              value: ''\n            })))\n          });\n        });\n      });\n    };\n\n    _this.submit = function (event) {\n      event.preventDefault();\n      var isValid = true;\n      var fields = _this.state.fields;\n\n      _lodash2.default.each(fields, function (field, name) {\n        if (field.isRequired && field.value === '') {\n          _this.validateField(name, '');\n\n          isValid = false;\n        }\n      });\n\n      if (isValid) {\n        _this.props.onSubmit(getFieldValues(fields), getPristineFieldValues(fields));\n      }\n    };\n\n    _this.deleteRow = function (row) {\n      var pos = row.indexOf('[');\n      var rowName = row.substr(0, pos);\n      var rowIndex = parseInt(row.substr(pos + 1), 10);\n      var fields = _this.state.fields;\n\n      _lodash2.default.each(fields, function (field, fieldName) {\n        if (fieldName.startsWith(row)) {\n          delete fields[fieldName];\n        } else if (fieldName.startsWith(rowName)) {\n          var index = parseInt(fieldName.substr(pos + 1), 10);\n\n          if (index > rowIndex) {\n            var newRow = fieldName.replace(/\\[\\d+\\]/, '[' + (index - 1) + ']');\n            delete fields[fieldName];\n            fields[newRow] = field;\n          }\n        }\n      });\n\n      _this.setState({\n        fields: fields\n      });\n    };\n\n    _this.onValuesChange = props.onValuesChange;\n    _this.validation = Object.assign(_this.validation, props.validation);\n    _this.state = {\n      disableSubmitButton: false,\n      fields: {}\n    };\n    return _this;\n  } // eslint-disable-next-line react/sort-comp\n\n\n  _createClass(Form, [{\n    key: 'enableSubmitButton',\n    value: function enableSubmitButton() {\n      if (this.state.disableSubmitButton) {\n        this.setState({\n          disableSubmitButton: false\n        });\n      }\n    }\n  }, {\n    key: 'disableSubmitButton',\n    value: function disableSubmitButton() {\n      if (this.props.disableSubmitButtonOnError) {\n        this.setState({\n          disableSubmitButton: true\n        });\n      }\n    }\n  }, {\n    key: 'cloneChildrenRecursively',\n    value: function cloneChildrenRecursively(children) {\n      var _this2 = this;\n\n      return _react2.default.Children.map(children, function (child) {\n        if (_lodash2.default.isEmpty(child)) {\n          return null;\n        }\n\n        if (_lodash2.default.isString(child)) {\n          return child;\n        }\n\n        var isFieldElement = verifyFieldElement(child);\n        var nestedChildren = _lodash2.default.isArray(child.props.children) && !isFieldElement ? _lodash2.default.filter(child.props.children, function (v) {\n          return _lodash2.default.isObject(v) || _lodash2.default.isString(v);\n        }) : false; // nested elements\n\n        if (nestedChildren !== false) {\n          // FormControl element with field/group name-value props\n          if (child.type === _FormControl2.default) {\n            var fieldElement = nestedChildren.find(function (el) {\n              return ![_FormLabel2.default, _InputLabel2.default, _FormHelperText2.default].includes(el.type) && el.props.name !== undefined && el.props.value !== undefined;\n            });\n\n            if (fieldElement !== undefined) {\n              var _name = fieldElement.props.name;\n              return _react2.default.createElement(_FormControlClone2.default, {\n                key: _name,\n                field: _this2.state.fields[_name],\n                formControlComp: child,\n                onConstruct: _this2.onFieldConstruct,\n                onValueChange: _this2.onFieldValueChange\n              });\n            }\n          } // non-FormControl element\n\n\n          return _react2.default.cloneElement(child, {\n            children: _this2.cloneChildrenRecursively(nestedChildren)\n          });\n        } // add disable functionality to submit button\n\n\n        if (child.props.type === 'submit') {\n          return _react2.default.cloneElement(child, {\n            disabled: _this2.state.disableSubmitButton\n          }); // non-interactive elements should be rendered as is\n        } else if (!isFieldElement) {\n          // delete row button\n          if (child.props[_propNames2.default.DELETE_FIELD_ROW] !== undefined) {\n            return _react2.default.createElement(_DeleteFieldRowButton2.default, {\n              buttonComp: child,\n              onRequestRowDelete: _this2.deleteRow\n            });\n          } // any other element\n\n\n          return child;\n        } // clone control label\n\n\n        if (child.type === _FormControlLabel2.default) {\n          var _name2 = child.props.control.props.name;\n          return _react2.default.createElement(_FormControlLabelClone2.default, {\n            key: _name2,\n            field: _this2.state.fields[_name2],\n            control: child.props.control,\n            label: child.props.label,\n            onConstruct: _this2.onFieldConstruct,\n            onToggle: _this2.onFieldToggle\n          });\n        } // clone input element\n\n\n        var name = child.props.name; // checkable\n\n        if (child.type === _Checkbox2.default || child.type === _Switch2.default) {\n          return _react2.default.createElement(_CheckableFieldClone2.default, {\n            key: name,\n            field: _this2.state.fields[name],\n            fieldComp: child,\n            onConstruct: _this2.onFieldConstruct,\n            onToggle: _this2.onFieldToggle\n          });\n        }\n\n        return _react2.default.createElement(_FieldClone2.default, {\n          key: name,\n          field: _this2.state.fields[name],\n          fieldComp: child,\n          onConstruct: _this2.onFieldConstruct,\n          onValueChange: _this2.onFieldValueChange,\n          useNativeRequiredValidator: !_this2.validation.requiredValidatorName,\n          validateInputOnBlur: _this2.validation.validateInputOnBlur\n        });\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement('form', {\n        autoComplete: this.props.autoComplete,\n        className: this.props.className,\n        onReset: this.reset,\n        onSubmit: this.submit,\n        style: this.props.style,\n        id: this.props.id,\n        method: this.props.method,\n        action: this.props.action,\n        name: this.props.name\n      }, this.cloneChildrenRecursively(this.props.children));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var fields = prevState.fields;\n\n      if (!_lodash2.default.isEmpty(fields)) {\n        // add validations to fields\n        _lodash2.default.each(nextProps.validations, function (validations, name) {\n          if (_lodash2.default.has(fields, name)) {\n            fields[name].validations = validations;\n          } else {\n            // eslint-disable-next-line no-console\n            console.warn('validations field \"' + name + '\" does not exist');\n          }\n        });\n\n        return {\n          fields: fields\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Form;\n}(_react2.default.Component), _class.defaultProps = {\n  activeStep: 0,\n  autoComplete: 'off',\n  className: undefined,\n  disableSubmitButtonOnError: true,\n  onFieldValidation: undefined,\n  onValuesChange: undefined,\n  style: {},\n  validation: {},\n  validations: {},\n  id: undefined,\n  method: undefined,\n  action: undefined,\n  name: undefined\n}, _temp);\nexports.default = Form;","map":null,"metadata":{},"sourceType":"script"}